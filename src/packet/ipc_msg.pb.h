// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc_msg.proto

#ifndef PROTOBUF_ipc_5fmsg_2eproto__INCLUDED
#define PROTOBUF_ipc_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ipc_5fmsg_2eproto();
void protobuf_AssignDesc_ipc_5fmsg_2eproto();
void protobuf_ShutdownFile_ipc_5fmsg_2eproto();

class IPCMessage;
class IPCReply;

// ===================================================================

class IPCMessage : public ::google::protobuf::Message {
 public:
  IPCMessage();
  virtual ~IPCMessage();

  IPCMessage(const IPCMessage& from);

  inline IPCMessage& operator=(const IPCMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCMessage& default_instance();

  void Swap(IPCMessage* other);

  // implements Message ----------------------------------------------

  IPCMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCMessage& from);
  void MergeFrom(const IPCMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional uint64 eqc = 2;
  inline bool has_eqc() const;
  inline void clear_eqc();
  static const int kEqcFieldNumber = 2;
  inline ::google::protobuf::uint64 eqc() const;
  inline void set_eqc(::google::protobuf::uint64 value);

  // optional uint64 dqc = 3;
  inline bool has_dqc() const;
  inline void clear_dqc();
  static const int kDqcFieldNumber = 3;
  inline ::google::protobuf::uint64 dqc() const;
  inline void set_dqc(::google::protobuf::uint64 value);

  // optional uint64 eqb = 4;
  inline bool has_eqb() const;
  inline void clear_eqb();
  static const int kEqbFieldNumber = 4;
  inline ::google::protobuf::uint64 eqb() const;
  inline void set_eqb(::google::protobuf::uint64 value);

  // optional uint64 qdelay = 5;
  inline bool has_qdelay() const;
  inline void clear_qdelay();
  static const int kQdelayFieldNumber = 5;
  inline ::google::protobuf::uint64 qdelay() const;
  inline void set_qdelay(::google::protobuf::uint64 value);

  // optional float current_prob = 6;
  inline bool has_current_prob() const;
  inline void clear_current_prob();
  static const int kCurrentProbFieldNumber = 6;
  inline float current_prob() const;
  inline void set_current_prob(float value);

  // @@protoc_insertion_point(class_scope:rl.IPCMessage)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_eqc();
  inline void clear_has_eqc();
  inline void set_has_dqc();
  inline void clear_has_dqc();
  inline void set_has_eqb();
  inline void clear_has_eqb();
  inline void set_has_qdelay();
  inline void clear_has_qdelay();
  inline void set_has_current_prob();
  inline void clear_has_current_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::uint64 eqc_;
  ::google::protobuf::uint64 dqc_;
  ::google::protobuf::uint64 eqb_;
  ::google::protobuf::uint64 qdelay_;
  float current_prob_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_5fmsg_2eproto();
  friend void protobuf_AssignDesc_ipc_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_ipc_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static IPCMessage* default_instance_;
};
// -------------------------------------------------------------------

class IPCReply : public ::google::protobuf::Message {
 public:
  IPCReply();
  virtual ~IPCReply();

  IPCReply(const IPCReply& from);

  inline IPCReply& operator=(const IPCReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCReply& default_instance();

  void Swap(IPCReply* other);

  // implements Message ----------------------------------------------

  IPCReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCReply& from);
  void MergeFrom(const IPCReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional float prob = 2;
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 2;
  inline float prob() const;
  inline void set_prob(float value);

  // @@protoc_insertion_point(class_scope:rl.IPCReply)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_prob();
  inline void clear_has_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  float prob_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_5fmsg_2eproto();
  friend void protobuf_AssignDesc_ipc_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_ipc_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static IPCReply* default_instance_;
};
// ===================================================================


// ===================================================================

// IPCMessage

// optional string msg = 1;
inline bool IPCMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& IPCMessage::msg() const {
  return *msg_;
}
inline void IPCMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IPCMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IPCMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* IPCMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCMessage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 eqc = 2;
inline bool IPCMessage::has_eqc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCMessage::set_has_eqc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCMessage::clear_has_eqc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCMessage::clear_eqc() {
  eqc_ = GOOGLE_ULONGLONG(0);
  clear_has_eqc();
}
inline ::google::protobuf::uint64 IPCMessage::eqc() const {
  return eqc_;
}
inline void IPCMessage::set_eqc(::google::protobuf::uint64 value) {
  set_has_eqc();
  eqc_ = value;
}

// optional uint64 dqc = 3;
inline bool IPCMessage::has_dqc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPCMessage::set_has_dqc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPCMessage::clear_has_dqc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPCMessage::clear_dqc() {
  dqc_ = GOOGLE_ULONGLONG(0);
  clear_has_dqc();
}
inline ::google::protobuf::uint64 IPCMessage::dqc() const {
  return dqc_;
}
inline void IPCMessage::set_dqc(::google::protobuf::uint64 value) {
  set_has_dqc();
  dqc_ = value;
}

// optional uint64 eqb = 4;
inline bool IPCMessage::has_eqb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IPCMessage::set_has_eqb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IPCMessage::clear_has_eqb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IPCMessage::clear_eqb() {
  eqb_ = GOOGLE_ULONGLONG(0);
  clear_has_eqb();
}
inline ::google::protobuf::uint64 IPCMessage::eqb() const {
  return eqb_;
}
inline void IPCMessage::set_eqb(::google::protobuf::uint64 value) {
  set_has_eqb();
  eqb_ = value;
}

// optional uint64 qdelay = 5;
inline bool IPCMessage::has_qdelay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IPCMessage::set_has_qdelay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IPCMessage::clear_has_qdelay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IPCMessage::clear_qdelay() {
  qdelay_ = GOOGLE_ULONGLONG(0);
  clear_has_qdelay();
}
inline ::google::protobuf::uint64 IPCMessage::qdelay() const {
  return qdelay_;
}
inline void IPCMessage::set_qdelay(::google::protobuf::uint64 value) {
  set_has_qdelay();
  qdelay_ = value;
}

// optional float current_prob = 6;
inline bool IPCMessage::has_current_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IPCMessage::set_has_current_prob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IPCMessage::clear_has_current_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IPCMessage::clear_current_prob() {
  current_prob_ = 0;
  clear_has_current_prob();
}
inline float IPCMessage::current_prob() const {
  return current_prob_;
}
inline void IPCMessage::set_current_prob(float value) {
  set_has_current_prob();
  current_prob_ = value;
}

// -------------------------------------------------------------------

// IPCReply

// optional string msg = 1;
inline bool IPCReply::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCReply::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCReply::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCReply::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& IPCReply::msg() const {
  return *msg_;
}
inline void IPCReply::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IPCReply::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void IPCReply::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCReply::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* IPCReply::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCReply::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float prob = 2;
inline bool IPCReply::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCReply::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCReply::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCReply::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float IPCReply::prob() const {
  return prob_;
}
inline void IPCReply::set_prob(float value) {
  set_has_prob();
  prob_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rl

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipc_5fmsg_2eproto__INCLUDED
