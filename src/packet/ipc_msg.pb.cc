// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rl {

namespace {

const ::google::protobuf::Descriptor* IPCMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPCReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_5fmsg_2eproto() {
  protobuf_AddDesc_ipc_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc_msg.proto");
  GOOGLE_CHECK(file != NULL);
  IPCMessage_descriptor_ = file->message_type(0);
  static const int IPCMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, eqc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, dqc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, eqb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, qdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, current_prob_),
  };
  IPCMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPCMessage_descriptor_,
      IPCMessage::default_instance_,
      IPCMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPCMessage));
  IPCReply_descriptor_ = file->message_type(1);
  static const int IPCReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCReply, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCReply, prob_),
  };
  IPCReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPCReply_descriptor_,
      IPCReply::default_instance_,
      IPCReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPCReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPCMessage_descriptor_, &IPCMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPCReply_descriptor_, &IPCReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_5fmsg_2eproto() {
  delete IPCMessage::default_instance_;
  delete IPCMessage_reflection_;
  delete IPCReply::default_instance_;
  delete IPCReply_reflection_;
}

void protobuf_AddDesc_ipc_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ripc_msg.proto\022\002rl\"f\n\nIPCMessage\022\013\n\003msg"
    "\030\001 \001(\t\022\013\n\003eqc\030\002 \001(\004\022\013\n\003dqc\030\003 \001(\004\022\013\n\003eqb\030"
    "\004 \001(\004\022\016\n\006qdelay\030\005 \001(\004\022\024\n\014current_prob\030\006 "
    "\001(\002\"%\n\010IPCReply\022\013\n\003msg\030\001 \001(\t\022\014\n\004prob\030\002 \001"
    "(\002", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc_msg.proto", &protobuf_RegisterTypes);
  IPCMessage::default_instance_ = new IPCMessage();
  IPCReply::default_instance_ = new IPCReply();
  IPCMessage::default_instance_->InitAsDefaultInstance();
  IPCReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_5fmsg_2eproto {
  StaticDescriptorInitializer_ipc_5fmsg_2eproto() {
    protobuf_AddDesc_ipc_5fmsg_2eproto();
  }
} static_descriptor_initializer_ipc_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IPCMessage::kMsgFieldNumber;
const int IPCMessage::kEqcFieldNumber;
const int IPCMessage::kDqcFieldNumber;
const int IPCMessage::kEqbFieldNumber;
const int IPCMessage::kQdelayFieldNumber;
const int IPCMessage::kCurrentProbFieldNumber;
#endif  // !_MSC_VER

IPCMessage::IPCMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPCMessage::InitAsDefaultInstance() {
}

IPCMessage::IPCMessage(const IPCMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPCMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eqc_ = GOOGLE_ULONGLONG(0);
  dqc_ = GOOGLE_ULONGLONG(0);
  eqb_ = GOOGLE_ULONGLONG(0);
  qdelay_ = GOOGLE_ULONGLONG(0);
  current_prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCMessage::~IPCMessage() {
  SharedDtor();
}

void IPCMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void IPCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCMessage_descriptor_;
}

const IPCMessage& IPCMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_5fmsg_2eproto();
  return *default_instance_;
}

IPCMessage* IPCMessage::default_instance_ = NULL;

IPCMessage* IPCMessage::New() const {
  return new IPCMessage;
}

void IPCMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    eqc_ = GOOGLE_ULONGLONG(0);
    dqc_ = GOOGLE_ULONGLONG(0);
    eqb_ = GOOGLE_ULONGLONG(0);
    qdelay_ = GOOGLE_ULONGLONG(0);
    current_prob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eqc;
        break;
      }

      // optional uint64 eqc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eqc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eqc_)));
          set_has_eqc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dqc;
        break;
      }

      // optional uint64 dqc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dqc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dqc_)));
          set_has_dqc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eqb;
        break;
      }

      // optional uint64 eqb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eqb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eqb_)));
          set_has_eqb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_qdelay;
        break;
      }

      // optional uint64 qdelay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qdelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qdelay_)));
          set_has_qdelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_current_prob;
        break;
      }

      // optional float current_prob = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_current_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_prob_)));
          set_has_current_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // optional uint64 eqc = 2;
  if (has_eqc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->eqc(), output);
  }

  // optional uint64 dqc = 3;
  if (has_dqc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dqc(), output);
  }

  // optional uint64 eqb = 4;
  if (has_eqb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->eqb(), output);
  }

  // optional uint64 qdelay = 5;
  if (has_qdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->qdelay(), output);
  }

  // optional float current_prob = 6;
  if (has_current_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->current_prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPCMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional uint64 eqc = 2;
  if (has_eqc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->eqc(), target);
  }

  // optional uint64 dqc = 3;
  if (has_dqc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dqc(), target);
  }

  // optional uint64 eqb = 4;
  if (has_eqb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->eqb(), target);
  }

  // optional uint64 qdelay = 5;
  if (has_qdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->qdelay(), target);
  }

  // optional float current_prob = 6;
  if (has_current_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->current_prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPCMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint64 eqc = 2;
    if (has_eqc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eqc());
    }

    // optional uint64 dqc = 3;
    if (has_dqc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dqc());
    }

    // optional uint64 eqb = 4;
    if (has_eqb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eqb());
    }

    // optional uint64 qdelay = 5;
    if (has_qdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qdelay());
    }

    // optional float current_prob = 6;
    if (has_current_prob()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPCMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPCMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPCMessage::MergeFrom(const IPCMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_eqc()) {
      set_eqc(from.eqc());
    }
    if (from.has_dqc()) {
      set_dqc(from.dqc());
    }
    if (from.has_eqb()) {
      set_eqb(from.eqb());
    }
    if (from.has_qdelay()) {
      set_qdelay(from.qdelay());
    }
    if (from.has_current_prob()) {
      set_current_prob(from.current_prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPCMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCMessage::CopyFrom(const IPCMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCMessage::IsInitialized() const {

  return true;
}

void IPCMessage::Swap(IPCMessage* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(eqc_, other->eqc_);
    std::swap(dqc_, other->dqc_);
    std::swap(eqb_, other->eqb_);
    std::swap(qdelay_, other->qdelay_);
    std::swap(current_prob_, other->current_prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPCMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCMessage_descriptor_;
  metadata.reflection = IPCMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPCReply::kMsgFieldNumber;
const int IPCReply::kProbFieldNumber;
#endif  // !_MSC_VER

IPCReply::IPCReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPCReply::InitAsDefaultInstance() {
}

IPCReply::IPCReply(const IPCReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPCReply::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCReply::~IPCReply() {
  SharedDtor();
}

void IPCReply::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void IPCReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCReply_descriptor_;
}

const IPCReply& IPCReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_5fmsg_2eproto();
  return *default_instance_;
}

IPCReply* IPCReply::default_instance_ = NULL;

IPCReply* IPCReply::New() const {
  return new IPCReply;
}

void IPCReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    prob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPCReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prob;
        break;
      }

      // optional float prob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPCReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // optional float prob = 2;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPCReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional float prob = 2;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPCReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional float prob = 2;
    if (has_prob()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPCReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPCReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPCReply::MergeFrom(const IPCReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPCReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCReply::CopyFrom(const IPCReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCReply::IsInitialized() const {

  return true;
}

void IPCReply::Swap(IPCReply* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPCReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCReply_descriptor_;
  metadata.reflection = IPCReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rl

// @@protoc_insertion_point(global_scope)
